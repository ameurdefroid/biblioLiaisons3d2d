/* Bielle manivelle 2D xy_top -- Crank and rod system
   v1.0.1
   Exemple de la bibliothèque
   31/07/2024
   Anthony Meurdefroid */

// Paramètres de sortie
// settings.outformat = "pdf" ;
settings.render = -4 ;
settings.prc = false ;

// Import library
import biblioLiaisons ;
/* Le point O(0,0,0) et un objet base b0 avec
b0.x = (1,0,0)
b0.y = (0,1,0)
b0.z = (0,0,1)
sont générés par défaut 
-----------------------------
The point O(0,0,0) and a base object b0 with
b0.x = (1,0,0)
b0.y = (0,1,0)
b0.z = (0,0,1)
are generated by default */

// taille police -- font size
defaultpen(fontsize(10pt));

// mise à l'échelle des dimensions - ne pas changer  -- dimensional scaling - do not change 
unitsize(1cm);


// Mise à jour de la scène :
// d'où on regarde le point (0,0,0)
triple eye = (0,0,1) ;
// quel vecteur vers le haut
triple up = (0,1,0) ;
// MAJ scène + pas d'effet de lumière (variables globales importées par les packages)
currentprojection = orthographic(eye, up, O) ;
currentlight = nolight;




/* -------------------------------------- */
/* Structure bielle manivelle */

// Parameters :
real R = 2 ;
real L = 3 ;
real theta10 = 55/360*2*pi ;
real theta20 = asin(-R/L*sin(theta10)) ;
real pos = R*cos(theta10) + L *sqrt(1-(R/L*sin(theta10))^2) ;

// Bases et points :
basis b1 = rotationBasis(1, b0, theta10, 'z', b0.z) ;
basis b2 = rotationBasis(2, b0, theta20, 'z', b0.z) ;

triple A = R*b1.x ;
triple B = pos*b0.x ;
real dec = 1 ;
triple C = B + 2*dec*b0.x ;
triple D = B + 4*dec*b0.x ;



// CEC 
pen CEC0 = black ;
pen CEC1 = red ;
pen CEC2 = purple ;
pen CEC3 = deepgreen ;


// Bases et paramétrages
showBasis(b0, O, coeff=(length(D-O)+1,R+1,2)) ; 
int[] tabIndices = {0} ;
showAxis(b1, tabIndices, O, R+1, style=black+0.25) ;
showParamAng(O, b0.x, b1.x, "$\theta_{1}$") ;


int[] tabIndices = {0} ;
showAxis(b2, tabIndices, B, 1., style=black+0.25) ;
showParamAng(B, b0.x, b2.x, "$\theta_{2}$", 0.5) ;
showParamLin(O, B, b0.x, -b0.y, "$x$", offset=0.75, pos=1*N, style=CEC3+0.25) ;


// Relier et bâti
real decBati = 1.25 ;
bati(O-decBati*b0.y, b0.x, -b0.y, CEC0) ;
link(O-decBati*b0.y -- O, CEC0) ;
bati(C-decBati*b0.y, b0.x, -b0.y, CEC0) ;
link(C-decBati*b0.y -- C, CEC0) ;
real prof = -1 ;
path3 pCEC1 = O -- O+prof*b0.z -- A+prof*b0.z -- A ;
link(pCEC1, CEC1) ;
link(A--B, CEC2) ;
link(B--D, CEC3) ;


// pour mettre au dessus du paramètrage -> mettre les liaisons après
 // Liaisons
liaisonPivot(O, b0.z, b0.x, CEC0, CEC1) ;
liaisonPivotGlissant(A, b0.z, CEC2, CEC1) ;
liaisonRotule(B, -b0.x, CEC2, CEC3) ;
liaisonGlissiere(C, b0.x, b0.y, CEC0, CEC3) ;





// Formes supplémentaires
addCylinder(D, b0.x, 0.35, 0.25, CEC3) ;


// Finir par les points
// Noms des points
namePoint(O,"O",(2,-2)) ;
namePoint(A,"A",(-2,2)) ;
namePoint(C,"C",(2,2)) ;
namePoint(B,"B",(-2,-2)) ;

// Numéros CEC
nameClasse2points("1", O, A, pos=NW, p=CEC1) ;
nameClasse2points("2", A, B, pos=NE, p=CEC2) ;
nameClasse2points("3", C, D, pos=N, p=CEC3) ;
nameClasse1point("0", O-decBati*b0.y, pos=5*E, p=CEC0) ;




